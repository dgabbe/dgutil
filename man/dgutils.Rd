% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dgutils-package.R
\docType{package}
\name{dgutils}
\alias{dgutils}
\alias{dgutils-package}
\title{dgutils: Interactive and analysis script utility functions.}
\description{
A collection of aliases, functions, and themes to improve your efficiency and R workflow.
}
\section{Aliases}{

Create some bash equivalents in aliases.R
}

\section{Functions}{

Utility/convenience functions are defined in separate files.
}

\section{Graphical Themes}{

This section is where your common idioms for programming graphics belong.
Since R has a number of different packages, there's a separate file for each
one.  Only ggplot is populated.
}

\section{\emph{graphics-ggplot.R}}{

The ggplot2 package is somewhat unique from other packages with heavy use of
the "+" continuation operator and the huge number of objects and functions
needed to generate a graph. Using the \code{Imports} directive and \code{::}
notation made \code{theme_dg} nearly inscrutable. Just take a look at the
gglot2 Namespace file,
\url{https://github.com/hadley/ggplot2/blob/master/NAMESPACE}. So yes, that is
why this package depends on ggplot2.
}

\section{Companion Projects}{

A companion package, \href{https://github.com/dgabbe/wdprompt}{wdprompt},
changes the console's prompt to follow your working directory, similar to
bash's behavior.  Review \href{https://github.com/dgabbe/rprofile.site}{rprofile.site}
to see how I customized R.
}

\section{Customize with \code{.First()} and Packages}{

After a year of experimenting with different ways to customize my R environment,
I think using  \code{.First()} and packages simplifies the process and provides better
portablility/sharing and encapsulation.

A base R environment consists of 7 packages in addition to
\code{base}. The common idiom
\code{option(defaultPackage = c(getOptions("defaultPackages"), "my-package",
"your-package")} assumes that your R environment is only initialized once.
That's what I thought until I started using the \code{devtools} package and
discovered many of the functions call R initialization code.  Thus each pass
will append \code{"your-package"} to the \code{defaultPacakges} list. While
R is smart enough to only attach packages once, it's still sloppy code.

Consider this alternative method to write analysis scripts.  Each script
includes a \code{library()} section at the top of the file.  This is similar
to python's \code{import} statement.  If you also write Python code, it makes
easier to switch back & forth between the languages.

For your own aliases and helper functions, create a package for them.  You
can share your package easily via the \code{devtools::install_*} variants.
There are some other advantages as well.  Having your own namespace avoids
collisions with other packages.  Your customizations persist when the Global
Environment is cleared.  RStudio makes it simple to develop a package and for
personal use, you can decide how much you want to document.
}

